mutation Commit($contents: GitHubBase64String = "", $message: GitHubCommitMessage = {}, $fileChanges: GitHubFileChanges = {additions: {}}, $branch: GitHubCommittableBranch = {}, $expectedHeadOid: GitHubGitObjectID = "") @netlify(id: """838284ee-3ace-425a-8158-520c91ba9cff""", doc: """An empty mutation to start from""") {
  gitHub {
    createCommitOnBranch(
      input: {message: $message, fileChanges: $fileChanges, branch: $branch, expectedHeadOid: $expectedHeadOid}
    ) {
      clientMutationId
    }
  }
}

query ExampleQuery @netlify(id: """df4c8cc1-2f1e-4d69-89c6-d695f77d45fd""", doc: """An example query to start with.""") {
  __typename
}

query GetIssueBreakdown($after: String) @netlify(id: """c67c5c11-cbc4-48ed-8ac8-2803a4e4dc5f""", doc: """Issue that allows querying GitHub for more information about issues.""") {
  gitHub {
    repository(owner: "microsoft", name: "powertoys") {
      issues(first: 100, states: OPEN, after: $after) {
        totalCount
        pageInfo {
          startCursor
          hasNextPage
          endCursor
        }
        edges {
          node {
            number
            title
            url
            state
            timelineItems(first: 200, itemTypes: CROSS_REFERENCED_EVENT) {
              totalCount
              pageInfo {
                startCursor
                hasNextPage
                endCursor
              }
              nodes {
                ... on GitHubCrossReferencedEvent {
                  source {
                    ... on GitHubIssue {
                      number
                      state
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
